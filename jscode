
//asdfasdf
function ExpandData() {
  var elements = document.getElementsByClassName( "complete" ) ; 
  for (i = 0; i < elements.length; i++) {
     elements[i].style.display = "flex" ;
  }
  var elements = document.getElementsByClassName( "brief" ) ; 
  for (i = 0; i < elements.length; i++) {
     elements[i].style.display = "none" ;
  }
  var elements = document.getElementsByClassName( "smallbutton" ) ; 
  for (i = 0; i < elements.length; i++) {
     elements[i].textContent = "Shorten" ;
  }
}

function ExpandCard( rino ) {
//  console.log( "shorten RI no: RI-no-" + rino ) ;
  
  var card = document.getElementById( "RI-no-" + rino ) ;
  var button = document.getElementById( "button-RI-no-" + rino ) ;
  var txt = button.textContent || button.innerText;
  if (txt == "Expand") {
    button.textContent = "Shorten" ;
    var children = card.getElementsByTagName('*') ; 
    for (const child of children) {
      if (child.classList.contains('complete')) {
         child.style.display = "flex" ;
      } else if (child.classList.contains('brief')) {
         child.style.display = "none" ;
      }  
    } 
  } else if (txt == "Shorten") {
    button.textContent = "Expand" ;
    var children = card.getElementsByTagName('*') ; 
    for (const child of children) {
      if (child.classList.contains('complete')) {
         child.style.display = "none" ;
      } else if (child.classList.contains('brief')) {
         child.style.display = "flex" ;
      }  
    } 
  }
}

//
function ShortenData() {
  var elements = document.getElementsByClassName( "complete" ) ; 
  for (i = 0; i < elements.length; i++) {
     elements[i].style.display = "none" ;
  }
  var elements = document.getElementsByClassName( "brief" ) ; 
  for (i = 0; i < elements.length; i++) {
     elements[i].style.display = "flex" ;
  }
  var elements = document.getElementsByClassName( "smallbutton" ) ; 
  for (i = 0; i < elements.length; i++) {
     elements[i].textContent = "Expand" ;
  }
}

//adapted from example code at w3schools.com
function deSelectList( listID ) {
  var selLists = document.getElementById("select"+listID);
//  console.log("type: " + listID + " selLists: " + selLists ) ; 
  if (!selLists) { return } ; 

  var found = false ; // flag set if at least one checkbox was cleared
  for (i = 0; i < selLists.length; i++) {
     if (selLists[i].checked) {
        selLists[i].checked = false ;
	if (selLists[i].getAttribute("value") != "deselect") {
	   found = true ;
	}
//	console.log( "found checked: " + selLists[i].getAttribute("value") ) ; 
     }
  }
  if (!found) { // none selected, so flip all to selected
     for (i = 0; i < selLists.length; i++) {
        selLists[i].checked = true ;
     }
  }
//  console.log( "updating" ) ; 
  sciSearchTerm() ; 
}

function fieldsAmong( selected, cardfields ) {
   for (const subj of selected) { 
      if (cardfields.indexOf( subj ) >-1) {
         return 1 ;
      }
   }
return 0 ;
}


function sciSearchTerm() {
  // Declare variables
  var input1, filter, fields, cards ;
  input1 = document.getElementById('sciSearch');
  filter = input1.value.toUpperCase();
  cards = document.getElementsByClassName('contactcard');

  var listHosts = [] ; 
  var selLists = document.getElementById('selectHost');
  if (selLists) {
     for (i = 0; i < selLists.length; i++) {
        if (selLists[i].checked) {
           listHosts.push( selLists[i].getAttribute("value")) ;
         }
     }
  }

  var listSizes = [] ; 
  var selLists = document.getElementById('selectSize');
  if (selLists) {
     for (i = 0; i < selLists.length; i++) {
        if (selLists[i].checked) {
           listSizes.push( selLists[i].getAttribute("value")) ;
	}
     }
  }

  var listLocal = [] ; 
  var selLists = document.getElementById('selectLocale');
  if (selLists) {
     for (i = 0; i < selLists.length; i++) {
        if (selLists[i].checked) {
           listLocal.push( selLists[i].getAttribute("value")) ;
        }
     }
  }

  var listField = [] ; 
  var selLists = document.getElementById('selectField');
  if (selLists) {
     for (i = 0; i < selLists.length; i++) {
        if (selLists[i].checked) {
           listField.push( selLists[i].getAttribute("value")) ;
        }
     }
  }

  var somelist = listHosts.length + listSizes.length + listLocal.length + listField.length > 0 ; 
  // Loop through all list items, and hide those who don't match the search query
  someShown = 0 ; 
  for (i = 0; i < cards.length; i++) {
    fields = cards[i].getAttribute('data-field') ;
    var show = 1 ; 
    if (filter.length>0) {
       if (fields.toUpperCase().indexOf(filter) == -1) {
          show = 0  ;
       }
    }
    if (listHosts.length && listHosts.indexOf(cards[i].getAttribute("data-host"))==-1 ) {
       show = 0 ;
    }
    if (listSizes.length && listSizes.indexOf(cards[i].getAttribute("data-size"))==-1 ) {
       show = 0 ;
    }
    if (listLocal.length && listLocal.indexOf(cards[i].getAttribute("data-locale"))==-1 ) {
       show = 0 ;
    }
    if (listField.length && fieldsAmong(listField, (cards[i].getAttribute("data-field")))==0 ) {
       show = 0 ;
    }

    if (show == 1) {
      cards[i].style.display = "block";
      someShown++ ; 
    } else {
      cards[i].style.display = "none";
    }
  }

  var noneFound = document.getElementById('NoRiFound') ;
  console.log( "noneFound: " + noneFound + '  someShown: ' + someShown ) ; 
  if (someShown>0) {
     noneFound.style.display = "none" ;
  } else {
     noneFound.style.display = "block" ;
  }

}


function comparatorname(a, b) { 
   if (a.dataset.name < b.dataset.name) return -1; 
   if (a.dataset.name > b.dataset.name) return 1; 
   return 0; 
} 
          
function comparatorhost(a, b) { 
   if (a.dataset.host < b.dataset.host) return -1; 
   if (a.dataset.host > b.dataset.host) return 1; 
   return 0; 
} 
          
function comparatorriid(a, b) { 
   if (Number(a.dataset.riid) < Number(b.dataset.riid)) return -1; 
   if (Number(a.dataset.riid) > Number(b.dataset.riid)) return 1; 
   return 0; 
} 
          
function comparatorsize(a, b) { 
   if (a.dataset.size < b.dataset.size) return -1; 
   if (a.dataset.size > b.dataset.size) return 1; 
   return 0; 
} 
          
function comparatorlocale(a, b) { 
   if (a.dataset.locale < b.dataset.locale) return -1; 
   if (a.dataset.locale > b.dataset.locale) return 1; 
   return 0; 
} 
          
        // Function to sort Data 
        function SortData(sortKey) {
//	 console.log( "sortKey: " + sortKey ) ; 
         if (sortKey == "name") { comparator = comparatorname } ;
         if (sortKey == "host") { comparator = comparatorhost } ;
         if (sortKey == "riid") { comparator = comparatorriid } ;
         if (sortKey == "size") { comparator = comparatorsize } ;
         if (sortKey == "locale") { comparator = comparatorlocale } ;
            var subjects = 
                document.querySelectorAll("[data-" + sortKey + "]"); 
            var subjectsArray = Array.from(subjects); 
            let sorted = subjectsArray.sort(comparator); 
            sorted.forEach(e => 
                document.querySelector("#biglist"). 
                    appendChild(e)); 
        } 

